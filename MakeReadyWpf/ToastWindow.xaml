<Popup x:Class="MakeReadyWpf.ToastWindow"
       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
       xmlns:local="clr-namespace:MakeReadyWpf"
       xmlns:i1="http://schemas.microsoft.com/expression/2010/interactivity"
       xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
       xmlns:converters="clr-namespace:MakeReadyWpf.Converters"
       StaysOpen="True" AllowsTransparency="True" PopupAnimation="Fade" Focusable="False"
       Placement="Custom" CustomPopupPlacementCallback="GetPopupPlacement"
       MinHeight="120" Width="400"
       IsOpen="{Binding IsShown}"
       mc:Ignorable="d"
       d:DesignHeight="120" d:DesignWidth="400">

    <Popup.Resources>
        <converters:ToastModeColorConverter x:Key="ToastModeColorConverter"/>
        <converters:ToastModeVisibilityConverter x:Key="ToastModeVisibilityConverter"/>
    </Popup.Resources>

    <Border BorderBrush="{Binding Mode, Converter={StaticResource ToastModeColorConverter}}" BorderThickness="1" Background="#E0FFE0" Opacity="0.8">
        <i:Interaction.Triggers>
            <i:EventTrigger EventName="MouseEnter">
                <i:InvokeCommandAction Command="{Binding MouseEnterCommand}"/>
            </i:EventTrigger>
            <i:EventTrigger EventName="MouseLeave">
                <i:InvokeCommandAction Command="{Binding MouseLeaveCommand}"/>
            </i:EventTrigger>
        </i:Interaction.Triggers>

        <Grid Margin="8">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>

            <DockPanel Grid.Row="0" HorizontalAlignment="Stretch">
                <Button DockPanel.Dock="Right" Command="{Binding CloseCommand}">
                    <Path Width="12" Height="12" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stretch="Uniform" Data="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z"/>
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="Button">
                                        <Border BorderThickness="0" Background="Transparent">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="Black"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{Binding IsError, Mode=OneWay, Converter={StaticResource ToastModeColorConverter}}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Canvas Margin="4,2,0,0">
                    <Rectangle Fill="{Binding IsError, Mode=OneWay, Converter={StaticResource ToastModeColorConverter}}" Height="8" Width="300"/>
                </Canvas>
            </DockPanel>
            <TextBlock Grid.Row="1" Margin="4" Text="{Binding Header}" FontWeight="SemiBold" FontSize="16"/>
            <TextBlock Grid.Row="2" Margin="4" Text="{Binding Message}" TextWrapping="Wrap"/>
            <StackPanel Grid.Row="3" Margin="4">
                <Label Padding="0" Content="{Binding CurrentState, Mode=OneWay}" Visibility="{Binding IsProgress, Mode=OneWay, Converter={StaticResource ToastModeVisibilityConverter}}"/>
                <ProgressBar Padding="0" Height="3" Minimum="0" Maximum="100" IsIndeterminate="{Binding IsIndeterminate, Mode=OneWay}" Value="{Binding CurrentProgress, Mode=OneWay}" Foreground="{Binding IsError, Mode=OneWay, Converter={StaticResource ToastModeColorConverter}}"/>
            </StackPanel>
        </Grid>
    </Border>
</Popup>
